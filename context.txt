## Подробное описание всех функций плагина

### 1. **getVariantProperties(componentSet)**

**Простыми словами**: Находит все возможные свойства (характеристики) вариантов компонента.

**Детальное описание**: 
- Берет ComponentSet и смотрит на все его варианты (дочерние элементы типа COMPONENT)
- Проходит по каждому варианту и собирает все названия свойств из `variantProperties`
- Например, если у вариантов есть свойства "Size" и "Color", функция вернет `["Size", "Color"]`
- Использует Set для удаления дубликатов, затем превращает в массив

---

### 2. **getComponentSetFromSelection()**

**Простыми словами**: Определяет, какой ComponentSet пользователь выбрал в Figma.

**Детальное описание**:
- Проверяет текущее выделение на странице
- Если выбран сам ComponentSet - возвращает его
- Если выбран отдельный вариант (Component) - возвращает его родителя (ComponentSet)
- Если ничего подходящего не выбрано - возвращает null
- Это позволяет работать с набором компонентов, даже если выбран только один вариант

---

### 3. **getComponentSettings(componentSet)**

**Простыми словами**: Загружает сохраненные настройки для конкретного компонента.

**Детальное описание**:
- Пытается прочитать настройки из `pluginData` компонента
- Если настройки есть - объединяет их с настройками по умолчанию
- Если настроек нет - возвращает стандартные значения
- Использует `Object.assign()` для обратной совместимости (если добавились новые настройки)
- Обрабатывает ошибки парсинга JSON

---

### 4. **saveComponentSettings(componentSet, settings)**

**Простыми словами**: Сохраняет настройки для конкретного компонента.

**Детальное описание**:
- Берет объект настроек и сохраняет их в `pluginData` компонента
- Преобразует в JSON для хранения
- Каждый ComponentSet хранит свои индивидуальные настройки
- При следующем выборе этого компонента настройки автоматически загрузятся

---

### 5. **updateSelectionInfo()**

**Простыми словами**: Отправляет информацию о выбранном компоненте в интерфейс плагина.

**Детальное описание**:
- Получает текущий ComponentSet из выделения
- Собирает информацию: название, свойства, количество вариантов, сохраненные настройки
- Отправляет данные в UI через `figma.ui.postMessage()`
- Если ComponentSet не выбран - отправляет информацию о том, что выделение невалидно
- UI использует эту информацию для обновления интерфейса

---

### 6. **createGroupKey(variant, groupProperties)**

**Простыми словами**: Создает уникальный ключ для группировки вариантов.

**Детальное описание**:
- Берет список свойств для группировки (например, ["Size", "State"])
- Для каждого варианта создает строку вида "Size:Large|State:Hover"
- Варианты с одинаковыми ключами попадают в одну группу
- Если у варианта нет нужного свойства, используется "undefined"
- Если свойств для группировки нет, возвращает "default"

---

### 7. **createSortingKey(variant, excludeProperties)**

**Простыми словами**: Создает ключ для сортировки вариантов внутри группы.

**Детальное описание**:
- Берет все свойства варианта, кроме тех, по которым уже сгруппировано
- Создает строку для сортировки в алфавитном порядке
- Например, если группировка по "Size", а сортировка по "Color" и "State": "Color:Blue|State:Default"
- Обеспечивает одинаковый порядок вариантов во всех группах

---

### 8. **createAnnotationsFolder(componentSet)**

**Простыми словами**: Создает контейнер для сбора всех аннотаций компонента.

**Детальное описание**:
- Создает специальный объект-контейнер с методами для добавления элементов
- `appendChild()` - добавляет элемент в конец
- `insertChild()` - добавляет элемент в определенную позицию (для слоев)
- `createFinalGroup()` - объединяет все собранные элементы в одну группу
- Возвращает контейнер, который ведет себя как обычная папка, но умеет создавать финальную группу

---

### 9. **createVariantAnnotation(text, x, y)**

**Простыми словами**: Создает текстовую подпись для варианта компонента.

**Детальное описание**:
- Создает текстовый узел с определенными стилями
- Пытается загрузить шрифт SB Sans Text, если не получается - использует Inter или Roboto
- Настраивает: размер 14px, цвет #7B29E5, выравнивание по правому краю
- Ограничивает ширину 100px с переносом строк
- Позиционирует текст в указанных координатах
- Возвращает готовый текстовый элемент

---

### 10. **createAnnotationLine(startX, startY, endX, endY, annotationsFolder)**

**Простыми словами**: Создает декоративную линию с загибами на концах.

**Детальное описание**:
- Создает векторную линию с 90-градусными загибами
- Определяет направление (горизонтальное или вертикальное)
- Для горизонтальных линий - загибы вниз, для вертикальных - вправо
- Использует SVG-пути для создания формы линии
- Настраивает стиль: цвет #7B29E5, прозрачность 30%, толщина 2px, скругление углов 6px
- Добавляет линию в самый низ стека слоев (под аннотациями)

---

### 11. **createGroupAnnotation(text, x, y)**

**Простыми словами**: Создает цветную рамку с текстом для названия группы.

**Детальное описание**:
- Создает Frame с AutoLayout для автоматического размера
- Создает текст внутри рамки с теми же шрифтами, что и варианты
- Настраивает рамку: фиолетовый фон (#7B29E5), скругленные углы (10px), отступы
- Текст белого цвета, центрируется автоматически
- Ограничивает ширину текста 100px с переносом строк
- AutoLayout автоматически подгоняет размер рамки под содержимое

---

### 12. **createMultiLevelGroups(variants, groupProperties, columnProperty)**

**Простыми словами**: Группирует варианты по нескольким уровням (сначала по основным свойствам, потом по колонкам).

**Детальное описание**:
- Сначала группирует все варианты по основным свойствам (например, по Size)
- Затем каждую основную группу разделяет по свойству колонок (например, по Color)
- Результат: `{"Size:Large": {"Color:Blue": [variants], "Color:Red": [variants]}}`
- Внутри каждой подгруппы варианты сортируются по оставшимся свойствам
- Если нет свойства для колонок, создает одну колонку "default"

---

### 13. **alignComponentVariants(...параметры)**

**Простыми словами**: Главная функция, которая выравнивает все варианты компонента.

**Детальное описание**:
- Проверяет, что выбран правильный ComponentSet
- Получает все варианты и удаляет существующие аннотации
- Создает папку для новых аннотаций (если нужно)
- Выбирает метод выравнивания: многоуровневый или простой
- Многоуровневый: если есть свойства для группировки
- Простой: если группировка не нужна (все варианты в одну колонку)
- Вызывает соответствующую функцию для создания макета

---

### 14. **setupMultiLevelGridLayout(...параметры)**

**Простыми словами**: Создает сложный макет с группировкой по рядам, колонкам и группам.

**Детальное описание**:
- Сначала группирует варианты по заданным свойствам
- Рассчитывает размеры: максимальная ширина/высота вариантов
- Создает матрицу: группы → ряды → колонки → варианты
- Позиционирует каждый вариант в сетке с учетом отступов
- Создает аннотации на 3 уровнях:
  - Уровень 1: группы (самые общие)
  - Уровень 2: колонки (средние)
  - Уровень 3: варианты (самые специфичные)
- Добавляет декоративные линии между уровнями аннотаций
- Автоматически изменяет размер ComponentSet под весь макет

---

### 15. **setupSimpleGridLayout(...параметры)**

**Простыми словами**: Создает простой макет в одну колонку без группировки.

**Детальное описание**:
- Располагает все варианты в одну колонку друг под другом
- Рассчитывает максимальные размеры для единообразия
- Создает аннотации только для вариантов (один уровень)
- Поддерживает два направления: горизонтальное (аннотации сверху) и вертикальное (аннотации слева)
- Изменяет размер ComponentSet под количество вариантов
- Создает финальную группу из всех аннотаций

---

## Как работает программа в целом

### **Инициализация**
1. Плагин запускается и показывает интерфейс размером 360x620px
2. Отслеживает изменения выделения в Figma
3. При каждом изменении выделения обновляет интерфейс

### **Анализ выделения**
1. Определяет, выбран ли ComponentSet (набор компонентов)
2. Извлекает все доступные свойства вариантов
3. Загружает сохраненные настройки для этого компонента
4. Отправляет информацию в интерфейс

### **Настройка параметров**
1. Пользователь видит в интерфейсе:
   - Название компонента и количество вариантов
   - Доступные свойства для группировки
   - Настройки отступов и макета
   - Опции аннотаций
2. Настройки автоматически загружаются из памяти
3. Пользователь может изменить любые параметры

### **Создание макета**
1. При нажатии "Apply" собираются все настройки
2. Настройки сохраняются для данного компонента
3. Удаляются старые аннотации (если есть)
4. Выбирается тип макета:
   - **Многоуровневый**: если есть группировка по свойствам
   - **Простой**: если группировка не нужна

### **Многоуровневый макет**
1. **Группировка**: Варианты группируются по выбранным свойствам
2. **Расчет размеров**: Определяются максимальные размеры элементов
3. **Создание сетки**: Группы размещаются в ряды, внутри групп - колонки
4. **Позиционирование**: Каждый вариант получает точные координаты
5. **Аннотации**: Создаются подписи на 3 уровнях с правильными отступами
6. **Линии**: Добавляются декоративные линии между уровнями

### **Простой макет**
1. **Линейное размещение**: Варианты размещаются в одну колонку
2. **Единообразие**: Все варианты выравниваются по максимальным размерам
3. **Аннотации**: Создаются только подписи вариантов
4. **Направление**: Аннотации располагаются сверху или слева

### **Финализация**
1. Изменяется размер ComponentSet под весь макет
2. Все аннотации объединяются в одну группу
3. Группа получает имя `"ComponentName annotations"`
4. Выводится информация о результате в консоль

### **Особенности системы**
- **Персистентность**: Настройки сохраняются для каждого компонента отдельно
- **Адаптивность**: Макет подстраивается под количество и свойства вариантов
- **Иерархия слоев**: Аннотации всегда поверх линий, линии поверх компонентов
- **Автоматические шрифты**: Система пытается использовать лучший доступный шрифт
- **Отзывчивость**: Интерфейс реагирует на изменения выделения в реальном времени

Эта программа превращает хаотично расположенные варианты компонентов в организованную сетку с понятными подписями и группировкой, что значительно упрощает работу с компонентами в Figma.

