## Подробное описание всех функций плагина

### 1. **getVariantProperties(componentSet)**

**Простыми словами**: Находит все возможные свойства (характеристики) вариантов компонента.

**Детальное описание**: 
- Берет ComponentSet и смотрит на все его варианты (дочерние элементы типа COMPONENT)
- Проходит по каждому варианту и собирает все названия свойств из `variantProperties`
- Например, если у вариантов есть свойства "Size" и "Color", функция вернет `["Size", "Color"]`
- Использует Set для удаления дубликатов, затем превращает в массив

---

### 2. **getComponentSetFromSelection()**

**Простыми словами**: Определяет, какой ComponentSet пользователь выбрал в Figma.

**Детальное описание**:
- Проверяет текущее выделение на странице
- Если выбран сам ComponentSet - возвращает его
- Если выбран отдельный вариант (Component) - возвращает его родителя (ComponentSet)
- Если ничего подходящего не выбрано - возвращает null
- Это позволяет работать с набором компонентов, даже если выбран только один вариант

---

### 3. **updateSelectionInfo()**

**Простыми словами**: Отправляет информацию о выбранном компоненте в интерфейс плагина.

**Детальное описание**:
- Получает текущий ComponentSet из выделения
- Собирает информацию: название, свойства, количество вариантов
- Отправляет данные в UI через `figma.ui.postMessage()`
- Если ComponentSet не выбран - отправляет информацию о том, что выделение невалидно
- UI использует эту информацию для обновления интерфейса

---

### 4. **createGroupKey(variant, groupProperties)**

**Простыми словами**: Создает уникальный ключ для группировки вариантов.

**Детальное описание**:
- Берет список свойств для группировки (например, ["Size", "State"])
- Для каждого варианта создает строку вида "Size:Large|State:Hover"
- Варианты с одинаковыми ключами попадают в одну группу
- Если у варианта нет нужного свойства, используется "undefined"
- Если свойств для группировки нет, возвращает "default"

---

### 5. **createSortingKey(variant, excludeProperties)**

**Простыми словами**: Создает ключ для сортировки вариантов внутри группы.

**Детальное описание**:
- Берет все свойства варианта, кроме тех, по которым уже сгруппировано
- Создает строку для сортировки в алфавитном порядке
- Например, если группировка по "Size", а сортировка по "Color" и "State": "Color:Blue|State:Default"
- Обеспечивает одинаковый порядок вариантов во всех группах

---

### 6. **createAnnotationsFolder(componentSet)**

**Простыми словами**: Создает контейнер для сбора всех аннотаций компонента с поддержкой двухуровневой системы.

**Детальное описание**:
- Создает специальный объект-контейнер с методами для добавления элементов двух типов:
  - **Основные аннотации**: `level1Annotations` (колонки), `level2Annotations` (группы), `lines` (линии)
  - **Дополнительные аннотации**: `rowAnnotations` (строки), `rowLines` (линии для строк)
- Методы добавления: `addLevel1Annotation()`, `addLevel2Annotation()`, `addLine()`, `addRowAnnotation()`, `addRowLine()`
- `createFinalStructure()` - создает два отдельных Frame с Auto Layout:
  - **Основной Frame**: для групп и колонок с правильным позиционированием
  - **Row Frame**: для дополнительных аннотаций строк
- **Позиционирование относительно ComponentSet**:
  - Горизонтальное направление: основные аннотации сверху, row аннотации слева
  - Вертикальное направление: основные аннотации слева, row аннотации сверху

---

### 7. **createAnnotationLine(startX, startY, endX, endY, annotationsFolder)**

**Простыми словами**: Создает декоративную линию с загибами на концах.

**Детальное описание**:
- Создает векторную линию с 90-градусными загибами
- Определяет направление (горизонтальное или вертикальное)
- Для горизонтальных линий - загибы вниз, для вертикальных - вправо
- Использует SVG-пути для создания формы линии
- Настраивает стиль: цвет #7B29E5, прозрачность 30%, толщина 2px, скругление углов 6px
- Добавляет линию в соответствующий контейнер аннотаций

---

### 8. **createGroupAnnotation(text, x, y)**

**Простыми словами**: Создает цветную рамку с текстом для названия группы.

**Детальное описание**:
- Создает Frame с AutoLayout для автоматического размера
- Создает текст внутри рамки с поддержкой множественных шрифтов (SB Sans Text → Inter → Roboto)
- Настраивает рамку: фиолетовый фон (#7B29E5), скругленные углы (10px), отступы
- Текст белого цвета, центрируется автоматически
- Ограничивает ширину текста 100px с переносом строк
- AutoLayout автоматически подгоняет размер рамки под содержимое

---

### 9. **createWrappedColumnAnnotation(text, x, y, columnDirection, columnWidth, columnHeight)**

**Простыми словами**: Создает аннотацию колонки, обернутую в Auto Layout контейнер с размерами колонки.

**Детальное описание**:
- Создает обычную аннотацию через `createGroupAnnotation()`
- Оборачивает ее в Frame с Auto Layout, размеры которого соответствуют размерам колонки
- **Горизонтальное направление**: 
  - Ширина контейнера = ширине колонки
  - Auto Layout HORIZONTAL с центрированием аннотации по горизонтали
- **Вертикальное направление**:
  - Высота контейнера = высоте колонки  
  - Auto Layout VERTICAL с центрированием аннотации по вертикали
- Аннотация автоматически центрируется внутри контейнера

---

### 10. **createWrappedRowAnnotation(text, x, y, columnDirection, rowWidth, rowHeight)**

**Простыми словами**: Создает аннотацию строки, обернутую в Auto Layout контейнер с размерами строки.

**Детальное описание**:
- Создает обычную аннотацию через `createGroupAnnotation()`
- Оборачивает ее в Frame с Auto Layout, размеры которого соответствуют размерам конкретного варианта
- **Горизонтальное направление**:
  - Высота контейнера = реальной высоте конкретного варианта (`variant.height`)
  - Auto Layout VERTICAL с центрированием аннотации по вертикали
- **Вертикальное направление**:
  - Ширина контейнера = реальной ширине конкретного варианта (`variant.width`)
  - Auto Layout HORIZONTAL с центрированием аннотации по горизонтали
- Аннотация автоматически центрируется внутри контейнера
- **ВАЖНО**: Каждая row аннотация имеет размеры именно того варианта, для которого она создается, а не максимальные размеры среди всех вариантов

---

### 11. **createMultiLevelGroups(variants, groupProperties, columnProperty)**

**Простыми словами**: Группирует варианты по нескольким уровням (сначала по основным свойствам, потом по колонкам).

**Детальное описание**:
- Сначала группирует все варианты по основным свойствам (например, по Size)
- Затем каждую основную группу разделяет по свойству колонок (например, по Color)
- Результат: `{"Size:Large": {"Color:Blue": [variants], "Color:Red": [variants]}}`
- Внутри каждой подгруппы варианты сортируются по оставшимся свойствам
- Если нет свойства для колонок, создает одну колонку "default"

---

### 12. **alignComponentVariants(...параметры)**

**Простыми словами**: Главная функция, которая выравнивает все варианты компонента.

**Детальное описание**:
- Проверяет, что выбран правильный ComponentSet
- Получает все варианты и **удаляет ВСЕ существующие аннотации** (основные и row аннотации)
- **Умное удаление**: ищет все папки, начинающиеся с `${componentSet.name} annotations`
- Создает папку для новых аннотаций (если нужно)
- Выбирает метод выравнивания: многоуровневый или простой
- Многоуровневый: если есть свойства для группировки
- Простой: если группировка не нужна (все варианты в одну колонку)
- Вызывает соответствующую функцию для создания макета

---

### 13. **setupMultiLevelGridLayout(...параметры)**

**Простыми словами**: Создает сложный макет с группировкой по рядам, колонкам и группам + двухуровневую систему аннотаций.

**Детальное описание**:
- Сначала группирует варианты по заданным свойствам
- Рассчитывает размеры: максимальная ширина/высота вариантов
- Создает матрицу: группы → ряды → колонки → варианты
- Позиционирует каждый вариант в сетке с учетом отступов
- **Система отслеживания дубликатов**: использует Set для предотвращения создания дублирующих аннотаций
- Создает **основные аннотации** на 2 уровнях:
  - Уровень 1: группы (самые общие)
  - Уровень 2: колонки (средние), обернутые в контейнеры с размерами колонок
- Создает **дополнительные row аннотации**:
  - Представляют свойства вариантов, не используемые для группировки и колонок
  - Обернуты в контейнеры с размерами строк (вариантов)
- **Позиционирование аннотаций**:
  - Горизонтальное направление: основные сверху, row слева
  - Вертикальное направление: основные слева, row сверху
- Добавляет декоративные линии между уровнями аннотаций
- **Важная особенность переноса групп**: При превышении "Максимума групп в строке" группы переносятся на новую строку с отступом, равным значению "Отступ между группами (px)" (параметр `groupSpacing`)
- Автоматически изменяет размер ComponentSet под весь макет

---

### 14. **setupSimpleGridLayout(...параметры)**

**Простыми словами**: Создает простой макет в одну колонку без группировки.

**Детальное описание**:
- Располагает все варианты в одну колонку друг под другом
- Рассчитывает максимальные размеры для единообразия
- Изменяет размер ComponentSet под количество вариантов
- Создает финальную структуру из всех аннотаций (если они есть)

---

## Как работает программа в целом

### **Инициализация**
1. Плагин запускается и показывает интерфейс размером 360x620px
2. Отслеживает изменения выделения в Figma
3. При каждом изменении выделения обновляет интерфейс

### **Анализ выделения**
1. Определяет, выбран ли ComponentSet (набор компонентов)
2. Извлекает все доступные свойства вариантов
3. Отправляет информацию в интерфейс

### **Настройка параметров**
1. Пользователь видит в интерфейсе:
   - Название компонента и количество вариантов
   - Доступные свойства для группировки
   - Настройки отступов и макета
   - Опции аннотаций
2. Пользователь может изменить любые параметры

### **Создание макета**
1. При нажатии "Apply" собираются все настройки
2. **Удаляются ВСЕ старые аннотации** (предотвращение дублирования)
3. Выбирается тип макета:
   - **Многоуровневый**: если есть группировка по свойствам
   - **Простой**: если группировка не нужна

### **Многоуровневый макет**
1. **Группировка**: Варианты группируются по выбранным свойствам
2. **Расчет размеров**: Определяются максимальные размеры элементов
3. **Создание сетки**: Группы размещаются в ряды, внутри групп - колонки
4. **Позиционирование**: Каждый вариант получает точные координаты
5. **Основные аннотации**: Создаются подписи групп и колонок с правильными отступами
6. **Row аннотации**: Создаются дополнительные подписи для оставшихся свойств
7. **Auto Layout обертки**: Все аннотации оборачиваются в контейнеры соответствующих размеров
8. **Структурированная организация**: Создается два отдельных Frame с Auto Layout
9. **Линии**: Добавляются декоративные линии между уровнями

### **Простой макет**
1. **Линейное размещение**: Варианты размещаются в одну колонку
2. **Финальная структура**: Создается организованная система аннотаций

### **Система предотвращения дублирования**
1. **Отслеживание позиций**: Используются Set для отслеживания созданных аннотаций
2. **Позиционное отслеживание**: Колонки отслеживаются по позиции, а не по названию
3. **Умное удаление**: При повторном запуске удаляются все связанные папки аннотаций
4. **Раздельное отслеживание**: Основные аннотации и row аннотации отслеживаются отдельно

### **Auto Layout система**
1. **Обертки аннотаций**: Каждая аннотация оборачивается в Frame с Auto Layout
2. **Размеры по содержимому**: Контейнеры имеют размеры соответствующих колонок/строк
3. **Автоматическое центрирование**: Аннотации центрируются внутри контейнеров
4. **Структурированная иерархия**: Создается правильная папочная структура с Auto Layout

Эта программа превращает хаотично расположенные варианты компонентов в организованную сетку с группировкой, что значительно упрощает работу с компонентами в Figma.

