const fs = require('fs');
const path = require('path');

// Build script –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–ª–∞–≥–∏–Ω–∞ Figma
function buildPlugin() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –ø–ª–∞–≥–∏–Ω–∞...');

    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ presets.js
    const presetsPath = path.join(__dirname, 'presets.js');
    const presetsContent = fs.readFileSync(presetsPath, 'utf8');
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ code.js
    const codePath = path.join(__dirname, 'code.js');
    const codeContent = fs.readFileSync(codePath, 'utf8');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏ –∏–∑ presets.js (–±–µ–∑ exports)
    const presetsOnlyContent = presetsContent
      .replace(/\/\/ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö[\s\S]*$/, '') // –£–¥–∞–ª—è–µ–º export –±–ª–æ–∫
      .trim();

    // –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å –±–ª–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏
    const builtCodeContent = codeContent.replace(
      /\/\/ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ presets\.js[\s\S]*?\/\/ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–∞\nloadPresets\(\);/,
      `// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ presets.js –ø—Ä–∏ —Å–±–æ—Ä–∫–µ)
${presetsOnlyContent}`
    );

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É dist –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const distDir = path.join(__dirname, 'dist');
    if (!fs.existsSync(distDir)) {
      fs.mkdirSync(distDir);
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const builtCodePath = path.join(distDir, 'code.js');
    fs.writeFileSync(builtCodePath, builtCodeContent);

    // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ dist
    const filesToCopy = ['manifest.json', 'ui.html'];
    filesToCopy.forEach(filename => {
      const sourcePath = path.join(__dirname, filename);
      const destPath = path.join(distDir, filename);
      if (fs.existsSync(sourcePath)) {
        fs.copyFileSync(sourcePath, destPath);
        console.log(`–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${filename}`);
      }
    });

    console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ dist/');
    console.log('üìÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dist/manifest.json –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –≤ Figma');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error.message);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - —Å–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤
function watchFiles() {
  console.log('üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤...');
  console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');

  const filesToWatch = ['presets.js', 'code.js', 'ui.html', 'manifest.json'];
  
  filesToWatch.forEach(filename => {
    const filepath = path.join(__dirname, filename);
    if (fs.existsSync(filepath)) {
      fs.watchFile(filepath, { interval: 1000 }, () => {
        console.log(`üìù –ò–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: ${filename}`);
        buildPlugin();
      });
    }
  });

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
  buildPlugin();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.includes('--watch') || args.includes('-w')) {
  watchFiles();
} else {
  buildPlugin();
} 